{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "https://peal.github.io/grplib/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Primitive Groups",
    "content": "Primitive Groups . A permutation group $G$ acting on $X$ is primitive if $G$ is transitive, and also $G$ does not stabilise any non-trivial partition of $X$ (such partitions are also known as block structures). . Primitive groups are a fundamental building block of many algorithms, as many algorithms use the block-structures of primitive groups to subdivide problems. . Two important primitive groups on a set $X$ are the Natural Symmetric Group and Natural Alternating Group, both acting on $|X|$ points. While these are primitive groups they are often omitted in experiments, and special cased by algorithms which run on primitive groups. . A GAP file containing the generating function is also available. . PrimitiveGenerator := function() return AllPrimitiveGroups(NrMovedPoints, [2..4095]); end; .",
    "url": "https://peal.github.io/grplib/groups/Primitive.html",
    "relUrl": "/groups/Primitive.html"
  }
  ,"2": {
    "title": "",
    "content": "Primitive Affine Groups . A GAP file containing the generating function is also available. . PrimitiveAffineGenerator := function() return AllPrimitiveGroups(NrMovedPoints, [2..4095], ONanScottType, [&quot;1&quot;]); end; .",
    "url": "https://peal.github.io/grplib/groups/PrimitiveAffine.html",
    "relUrl": "/groups/PrimitiveAffine.html"
  }
  ,"3": {
    "title": "",
    "content": "Primitive of Type PA Groups . A GAP file containing the generating function is also available. . Note that groups generated by this function will have degree higher than 4095, which is the current limit of the primgrp library. . BEWARE this code will require more memory than GAP allocates normally. . PrimitivePAGenerator := function() local T, top, WP; top := AllTransitiveGroups(NrMovedPoints, [2..37]); T := PrimitiveGroupsIterator(NrMovedPoints, [2..4095], ONanScottType, &quot;2&quot;); WP := []; for j in top do for i in T do Add(WP, WreathProductProductAction(i, j)); od; od; return WP; end; .",
    "url": "https://peal.github.io/grplib/groups/PrimitivePA.html",
    "relUrl": "/groups/PrimitivePA.html"
  }
  ,"4": {
    "title": "",
    "content": "Simple Finite Non-Abelian Groups . For the generating function download the GAP file . AllSmallNonabelianSimpleGroups will genenrate all groups of this type up to and including order UpToOrder . . grplist := AllSmallNonabelianSimpleGroups(UpToOrder); .",
    "url": "https://peal.github.io/grplib/groups/SimpleFiniteNonAbelian.html",
    "relUrl": "/groups/SimpleFiniteNonAbelian.html"
  }
  ,"5": {
    "title": "About",
    "content": "About . The current editors-in-chief of GrpLib are Chris Jefferson and Ruth Hoffmann. The current website maintainers are Chris Jefferson and Ruth Hoffmann. . We are grateful to all the contributors of GrpLib. . Please submit any updates or corrections to GrpLib to our git repository, either as a new issue, or pull request. . License . This work is licensed under a Creative Commons Attribution 4.0 International License. .",
    "url": "https://peal.github.io/grplib/about.html",
    "relUrl": "/about.html"
  }
  ,"6": {
    "title": "Home",
    "content": "Welcome to GrpLib! . GrpLib is a library for computational group theory problems and for group generation. Each problem is presented with papers, and linked to the sets of groups that either are difficult to solve over, or the sets of groups on which the algorithms have been tested on. Currently, the group generation code is in GAP, we encourage any languages to be used. . The aim of GrpLib is to provide a place to add new problems and new ways of generating groups. We hope that this will develop to a library of benchmark sets of groups and algorithms, is a first step to making computational group theory recomputable. .",
    "url": "https://peal.github.io/grplib/",
    "relUrl": "/"
  }
  ,"7": {
    "title": "Groups",
    "content": "List of groups . Finite Non-Abelian Simple Groups . Primitive Groups . Primitive Affine Groups . Primitive of Type PA Groups .",
    "url": "https://peal.github.io/grplib/groups/",
    "relUrl": "/groups/"
  }
  ,"8": {
    "title": "Normalizer",
    "content": "Normalizer . Problem Definition . Given two groups $S$ and $G$, the normalizer of $S$ in the group $G$ is defined as: . $ mathrm {N} _{G}(S)= {g in G mid gS=Sg }.$ . Finding the normaliser of a group is a difficult problem in computational group theory. A commonly considered special case is where $G$ is the symmetric group, even here the problem is still difficult. . Attempts to solve the normaliser problem have traditionally taken two routes, either producing more practically efficient algorithms for the general case, or considering specialised theory and algorithms for special cases of $S$. . Brief overviews of algorithms for the normalizer can be found in (Holt et al., 2005) and (Seress, 2003) . Algorithms . Improved theory and algorithms for finding the normalizer of primitive groups can be found in: . (Siccha, 2020) Towards Efficient Normalizers of Primitive Groups. repository. . Groups . Finite Non-Abelian Simple Groups . Primitive Groups . Primitive Affine Groups . Primitive of Type PA Groups . References . Holt, D. F., Eick, B., &amp; O’Brien, E. A. (2005). Handbook of computational group theory (p. xvi+514). Chapman &amp; Hall/CRC, Boca Raton, FL. https://doi.org/10.1201/9781420035216 | Seress, Á. (2003). Permutation group algorithms (Vol. 152, p. x+264). Cambridge University Press, Cambridge. https://doi.org/10.1017/CBO9780511546549 | Siccha, S. (2020). Towards Efficient Normalizers of Primitive Groups. |",
    "url": "https://peal.github.io/grplib/problems/normalizer/",
    "relUrl": "/problems/normalizer/"
  }
  ,"9": {
    "title": "Canonical Images",
    "content": "Canonical Images . Given a group $G$ acting on a set $S$, a Canonising function $f:S mapsto S$ which satisfies two conditions: . $ exists g in G. f(S) = S^g $. | $ forall s in S, g in G. f(S) = f(S^g) $. | . Together these functions provide a way of checking if two items $s_1,s_2 in S$ are in the same orbit of $G$. . While there are functions which check if $ exists g in G. s_1^g = s_2$ directly, canonising functions are useful because given a large set $T subseteq S$, we can use the canonical image of each element of $T$ to find equivalent subsets, while we would have to perform $|T|^2$ pair-wise checks if we could only check if two elements were in the same orbit. . Canonical image algorithms are usually defined by $S$, the objects which they can find the canonical image for. . Graphs . The most famous example of finding canonical image is graphs and digraphs. In this area Nauty (and it’s extension Traces) (McKay &amp; Piperno, 2014) is the most famous system. Other systems such as Saucy (Darga et al., 2008), Bliss (Junttila &amp; Kaski, 2007) and Conauto (López-Presa et al., 2011) implement different improvements and extensions to Nauty’s original algorithm. . Sets . The first published algorithm for finding the canonical image of a set under a group found the minimal image of the set in its orbit (Linton, 2004). Later algorithms have found other canonical images (Jefferson et al., 2019). . References . Jefferson, C., Jonauskyte, E., Pfeiffer, M., &amp; Waldecker, R. (2019). Minimal and canonical images. J. Algebra, 521, 481–506. https://doi.org/10.1016/j.jalgebra.2018.11.009 | Junttila, T., &amp; Kaski, P. (2007). Engineering an efficient canonical labeling tool for large and sparse graphs. In D. Applegate, G. S. Brodal, D. Panario, &amp; R. Sedgewick (Eds.), Proceedings of the Ninth Workshop on Algorithm Engineering and Experiments and the Fourth Workshop on Analytic Algorithms and Combinatorics (pp. 135–149). SIAM. | Linton, S. (2004). Finding the smallest image of a set. Proceedings of the International Symposium on Symbolic and Algebraic Computation, ISSAC, 229–234. https://doi.org/10.1145/1005285.1005319 | López-Presa, J. L., Anta, A. F., &amp; Chiroque, L. N. (2011). Conauto-2.0: Fast Isomorphism Testing and Automorphism Group Computation. CoRR, abs/1108.1060. http://arxiv.org/abs/1108.1060 | McKay, B. D., &amp; Piperno, A. (2014). Practical graph isomorphism, II. Journal of Symbolic Computation , 60(0), 94–112. https://doi.org/10.1016/j.jsc.2013.09.003 | Darga, P. T., Sakallah, K. A., &amp; Markov, I. L. (2008). Faster symmetry discovery using sparsity of symmetries. 2008 45th ACM/IEEE Design Automation Conference, 149–154. |",
    "url": "https://peal.github.io/grplib/problems/canonical/",
    "relUrl": "/problems/canonical/"
  }
  ,"10": {
    "title": "Problems",
    "content": "List of problems . Normalizer . Canonical Images .",
    "url": "https://peal.github.io/grplib/problems/",
    "relUrl": "/problems/"
  }
  
}